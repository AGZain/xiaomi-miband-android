package com.motioncoding.miband;

import java.util.Arrays;
import java.util.UUID;

import android.app.Activity;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothGatt;
import android.bluetooth.BluetoothGattCallback;
import android.bluetooth.BluetoothGattCharacteristic;
import android.bluetooth.BluetoothGattService;
import android.bluetooth.BluetoothManager;
import android.bluetooth.BluetoothProfile;
import android.content.Context;
import android.os.Bundle;
import android.util.Log;

import com.motioncoding.miband.model.Battery;
import com.motioncoding.miband.model.MiBand;

public class MiOverviewActivity extends Activity {

	private static final UUID UUID_MILI_SERVICE = UUID
			.fromString("0000fee0-0000-1000-8000-00805f9b34fb");
	private static final UUID UUID_CHAR_AUTH = UUID
			.fromString("0000ff0f-0000-1000-8000-00805f9b34fb");
	private static final UUID UUID_CHAR_REALTIME_STEPS = UUID
			.fromString("0000ff06-0000-1000-8000-00805f9b34fb");
	private static final UUID UUID_CHAR_ACTIVITY = UUID
			.fromString("0000ff07-0000-1000-8000-00805f9b34fb");
	private static final UUID UUID_CHAR_DEVICE_NAME = UUID
			.fromString("0000ff02-0000-1000-8000-00805f9b34fb");
	private static final UUID UUID_CHAR_BATTERY = UUID
			.fromString("0000ff0c-0000-1000-8000-00805f9b34fb");

	private String mDeviceAddress;
	private BluetoothManager mBluetoothManager;
	private BluetoothAdapter mBluetoothAdapter;
	private BluetoothDevice mBluetoothMi;
	private BluetoothGatt mGatt;

	private MiBand mMiBand = new MiBand();

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		getActionBar().hide();
		mDeviceAddress = getIntent().getStringExtra("address");

		mMiBand.mBTAddress = mDeviceAddress;

		setContentView(R.layout.activity_mi_overview);
		mBluetoothManager = ((BluetoothManager) getSystemService(Context.BLUETOOTH_SERVICE));
		mBluetoothAdapter = mBluetoothManager.getAdapter();
		mBluetoothMi = mBluetoothAdapter.getRemoteDevice(mDeviceAddress);

	}

	@Override
	public void onResume() {
		super.onResume();
		mGatt = mBluetoothMi.connectGatt(this, false, mGattCallback);
		mGatt.connect();
	}

	@Override
	public void onPause() {
		super.onPause();
		mGatt.disconnect();
		mGatt.close();
		mGatt = null;
	}

	private void auth() {

		BluetoothGattCharacteristic chrt = getMiliService().getCharacteristic(
				UUID_CHAR_AUTH);

		chrt.setValue(new byte[] { 2 });

		mGatt.writeCharacteristic(chrt);
		System.out.println("Auth sent");
	}

	private void request(UUID what) {
		mGatt.readCharacteristic(getMiliService().getCharacteristic(what));
	}

	private BluetoothGattService getMiliService() {
		return mGatt.getService(UUID_MILI_SERVICE);

	}

	private BluetoothGattCallback mGattCallback = new BluetoothGattCallback() {

		int state = 0;

		@Override
		public void onServicesDiscovered(BluetoothGatt gatt, int status) {
			if (status == BluetoothGatt.GATT_SUCCESS) {
				auth();
			}

		}

		@Override
		public void onConnectionStateChange(BluetoothGatt gatt, int status,
				int newState) {
			if (newState == BluetoothProfile.STATE_CONNECTED) {
				gatt.discoverServices();
			}
		}

		@Override
		public void onCharacteristicWrite(BluetoothGatt gatt,
				BluetoothGattCharacteristic characteristic, int status) {
			// this is called tight after auth()
			request(UUID_CHAR_REALTIME_STEPS); // start with steps
		}

		@Override
		public void onCharacteristicRead(BluetoothGatt gatt,
				BluetoothGattCharacteristic characteristic, int status) {
			Log.i(characteristic.getUuid().toString(), "state: " + state
					+ " value:" + Arrays.toString(characteristic.getValue()));
			switch (state) {
			case 0:
				System.out.println(characteristic.getIntValue(0, 0));
				break;
			case 1:
				Battery bat = Battery.fromByte(characteristic.getValue());
				System.out.println();
				break;
			}

			state++;
			switch (state) {
			case 0:
				request(UUID_CHAR_REALTIME_STEPS);
				break;
			case 1:
				request(UUID_CHAR_BATTERY);
				break;
			case 2:
				request(UUID_CHAR_ACTIVITY);
				break;
			case 3:
				request(UUID_CHAR_DEVICE_NAME);
				break;
			}
		}
	};

}
