package com.motioncoding.miband;

import android.app.Activity;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothAdapter.LeScanCallback;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothManager;
import android.content.Context;
import android.os.Bundle;
import android.os.Handler;

public class MiActivity extends Activity implements LeScanCallback {

	private BluetoothManager bluetoothManager;
	private BluetoothAdapter mBluetoothAdapter;
    private boolean mScanning;
    private Handler mHandler;
 // Stops scanning after 10 seconds.
    private static final long SCAN_PERIOD = 10000;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_mi);
		bluetoothManager = (BluetoothManager) getSystemService(Context.BLUETOOTH_SERVICE);
	}

	@Override
	public void onResume() {
		super.onResume();
	}
	
	

    
    private void scanLeDevice(final boolean enable) {
        if (enable) {
            // Stops scanning after a pre-defined scan period.
            mHandler.postDelayed(new Runnable() {
                @Override
                public void run() {
                    mScanning = false;
                    mBluetoothAdapter.stopLeScan(this);
                }
            }, SCAN_PERIOD);

            mScanning = true;
            mBluetoothAdapter.startLeScan(this);
        } else {
            mScanning = false;
            mBluetoothAdapter.stopLeScan(this);
        }
    }

	@Override
	public void onLeScan(BluetoothDevice device, int rssi, byte[] scanRecord) {
		if(device != null && device.getName() != null & device.getName().equals("MI")) {
			System.out.println(device.getAddress());
			bluetoothManager.getAdapter().stopLeScan(this);
		}
	}
	
	@Override
	public void onPause() {
		super.onPause();
		bluetoothManager.getAdapter().stopLeScan(this);
	}
}
